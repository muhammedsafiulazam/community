// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: public_member_api_docs, prefer_single_quotes, avoid_escaping_inner_quotes, prefer_const_constructors, sort_constructors_first, always_specify_types

import 'dart:async';

import 'package:flutter/widgets.dart';

/// A class generated by flappy_translator package containing localized strings
class I18nExt {
  static String get community => _getText("community");

  static String get users => _getText("users");

  static String get members => _getText("members");

  static String get algorithm => _getText("algorithm");

  static String get name_first => _getText("name_first");

  static String get name_last => _getText("name_last");

  static String get nationality => _getText("nationality");

  static String get gender => _getText("gender");

  static String get male => _getText("male");

  static String get female => _getText("female");

  static String get calculate => _getText("calculate");

  static String get products => _getText("products");

  static String get containers => _getText("containers");

  static String get error_products => _getText("error_products");

  static String get hints_products => _getText("hints_products");

  static String get search => _getText("search");

  static String get hints_search => _getText("hints_search");

  static late Map<String, String> _localizedValues;

  static const _enValues = {
    "community": "Community",
    "users": "Users",
    "members": "Members",
    "algorithm": "Algorithm",
    "name_first": "First Name",
    "name_last": "Last Name",
    "nationality": "Nationality",
    "gender": "Gender",
    "male": "Male",
    "female": "Female",
    "calculate": "Calculate",
    "products": "Products",
    "containers": "Containers",
    "error_products": "Products must be between 1 and 9.",
    "hints_products": "Ex. 87329",
    "search": "Search",
    "hints_search": "Ex. Abc",
  };

  static const _frValues = {
    "community": "Community",
    "users": "Utilisateurs",
    "members": "Membres",
    "algorithm": "Algorithme",
    "name_first": "Prénom",
    "name_last": "Nom",
    "nationality": "Nationalité",
    "gender": "Sexe",
    "male": "Homme",
    "female": "Femme",
    "calculate": "Calculer",
    "products": "Produits",
    "containers": "Conteneurs",
    "error_products": "Produits doivent être compris entre 1 et 9.",
    "hints_products": "Ex. 87329",
    "search": "Rechercher",
    "hints_search": "Ex. Abc",
  };

  static const _allValues = {
    "en": _enValues,
    "fr": _frValues,
  };

  I18nExt(Locale locale) {
    _locale = locale;
    _localizedValues = {};
  }

  static late Locale _locale;

  static String _getText(String key) =>
      _localizedValues[key] ?? '** $key not found';

  static Locale get currentLocale => _locale;

  static String get currentLanguage => _locale.languageCode;

  static Future<I18nExt> load(Locale locale) async {
    final translations = I18nExt(locale);
    _localizedValues = _allValues[locale.toString()]!;
    return translations;
  }
}

class I18nExtDelegate extends LocalizationsDelegate<I18nExt> {
  const I18nExtDelegate();

  static final Set<Locale> supportedLocals = {
    Locale('en'),
    Locale('fr'),
  };

  @override
  bool isSupported(Locale locale) => supportedLocals.contains(locale);

  @override
  Future<I18nExt> load(Locale locale) => I18nExt.load(locale);

  @override
  bool shouldReload(I18nExtDelegate old) => false;
}
